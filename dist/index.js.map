{
  "version": 3,
  "sources": ["../lib/defaults.json", "../lib/dtypes.js", "../lib/validate.js", "../lib/factory.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["{\n\t\"dtype\": \"float64\",\n  \"order\": \"row-major\"\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar dtypes = require( '@stdlib/array-typed-real-float-dtypes' );\n\n\n// MAIN //\n\n/**\n* List of supported data types.\n*\n* @private\n* @name DTYPES\n* @type {StringArray}\n*/\nvar DTYPES = dtypes();\nDTYPES.push( 'generic' );\n\n\n// EXPORTS //\n\nmodule.exports = DTYPES;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar format = require( '@stdlib/string-format' );\nvar DTYPES = require( './dtypes.js' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.dtype] - array data type\n* @param {string} [options.order] - memory layout (either row-major or column-major)\n* @param {string} [options.mode] - specifies how to handle indices which exceed array dimensions\n* @param {StringArray} [options.submode] - specifies how to handle subscripts which exceed array dimensions on a per dimension basis\n* @param {boolean} [options.readonly] - boolean indicating whether an array should be read-only\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'dtype': 'float64'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\topts.dtype = options.dtype;\n\t\tif ( DTYPES.indexOf( opts.dtype ) < 0 ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'dtype', DTYPES.join( '\", \"' ), opts.dtype ) );\n\t\t}\n\t}\n\t// Pass-through options...\n\tif ( hasOwnProp( options, 'order' ) ) {\n\t\topts.order = options.order;\n\t}\n\tif ( hasOwnProp( options, 'mode' ) ) {\n\t\topts.mode = options.mode;\n\t}\n\tif ( hasOwnProp( options, 'submode' ) ) {\n\t\topts.submode = options.submode;\n\t}\n\tif ( hasOwnProp( options, 'readonly' ) ) {\n\t\topts.readonly = options.readonly;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils-define-nonenumerable-read-write-accessor' );\nvar isArrayLikeObject = require( '@stdlib/assert-is-array-like-object' );\nvar isndarrayLike = require( '@stdlib/assert-is-ndarray-like' );\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar constantFunction = require( '@stdlib/utils-constant-function' );\nvar noop = require( '@stdlib/utils-noop' );\nvar base = require( '@stdlib/random-base-exponential' );\nvar ctors = require( '@stdlib/array-typed-real-float-ctors' );\nvar filledBy = require( '@stdlib/array-base-filled-by' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar nullaryStrided = require( '@stdlib/strided-base-nullary' );\nvar unary = require( '@stdlib/ndarray-base-unary' );\nvar broadcastArray = require( '@stdlib/ndarray-base-broadcast-array' );\nvar shape2strides = require( '@stdlib/ndarray-base-shape2strides' );\nvar numel = require( '@stdlib/ndarray-base-numel' );\nvar ndarray = require( '@stdlib/ndarray-ctor' );\nvar basendarray = require( '@stdlib/ndarray-base-ctor' );\nvar format = require( '@stdlib/string-format' );\nvar defaults = require( './defaults.json' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for generating pseudorandom numbers drawn from an exponential distribution.\n*\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {string} [options.dtype=\"float64\"] - default data type\n* @param {string} [options.order=\"row-major\"] - default memory layout (either row-major or column-major)\n* @param {string} [options.mode=\"throw\"] - default specifying how to handle indices which exceed array dimensions\n* @param {StringArray} [options.submode=[\"throw\"]] - default specifying how to handle subscripts which exceed array dimensions on a per dimension basis\n* @param {boolean} [options.readonly=false] - default indicating whether an array should be read-only\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for creating arrays\n*\n* @example\n* var rand = factory({\n*     'dtype': 'generic',\n*     'order': 'column-major'\n* });\n* // returns <Function>\n*\n* var arr = rand( [ 10 ], 2.0 );\n* // returns <ndarray>\n*\n* @example\n* var rand = factory({\n*     'dtype': 'generic',\n*     'order': 'column-major'\n* });\n* // returns <Function>\n*\n* var arr = rand( [ 10 ], 2.0, {\n*     'dtype': 'float32'\n* });\n* // returns <ndarray>\n*/\nfunction factory() {\n\tvar options;\n\tvar opts;\n\tvar prng;\n\tvar err;\n\n\topts = {\n\t\t'dtype': defaults.dtype,\n\t\t'order': defaults.order\n\t};\n\n\tif ( arguments.length > 0 ) {\n\t\toptions = arguments[ 0 ];\n\t\tprng = base.factory( options );\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t} else {\n\t\tprng = base;\n\t}\n\tif ( options && options.prng ) {\n\t\tsetReadOnly( rand, 'seed', null );\n\t\tsetReadOnly( rand, 'seedLength', null );\n\t\tsetReadWriteAccessor( rand, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( rand, 'stateLength', null );\n\t\tsetReadOnly( rand, 'byteLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( rand, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( rand, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( rand, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( rand, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( rand, 'byteLength', getStateSize );\n\t}\n\tsetReadOnly( rand, 'PRNG', prng.PRNG );\n\tsetReadOnly( rand, 'assign', assign );\n\treturn rand;\n\n\t/**\n\t* Returns pseudorandom numbers drawn from an exponential distribution with rate parameter `lambda`.\n\t*\n\t* @private\n\t* @param {NonNegativeIntegerArray} shape - array shape\n\t* @param {(PositiveNumber|ndarrayLike)} lambda - rate parameter\n\t* @param {Options} [options] - function options\n\t* @param {string} [options.dtype] - array data type\n\t* @param {string} [options.order] - memory layout (either row-major or column-major)\n\t* @param {string} [options.mode] - specifies how to handle indices which exceed array dimensions\n\t* @param {StringArray} [options.submode] - specifies how to handle subscripts which exceed array dimensions on a per dimension basis\n\t* @param {boolean} [options.readonly] - boolean indicating whether an array should be read-only\n\t* @throws {TypeError} first argument must be a valid shape\n\t* @throws {TypeError} must provide valid distribution parameters\n\t* @throws {TypeError} distribution parameters and the desired shape must be broadcast compatible\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {ndarray} output array\n\t*/\n\tfunction rand( shape, lambda, options ) {\n\t\tvar param1;\n\t\tvar ctor;\n\t\tvar buf;\n\t\tvar err;\n\t\tvar len;\n\t\tvar ord;\n\t\tvar FLG;\n\t\tvar out;\n\t\tvar dt;\n\t\tvar st;\n\t\tvar sh;\n\t\tvar o;\n\n\t\tif ( !isArrayLikeObject( shape ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array-like object containing nonnegative integers. Value: `%s`.', shape ) );\n\t\t}\n\t\tlen = numel( shape );\n\t\tif ( len < 0 ) {\n\t\t\tthrow new TypeError( 'invalid argument. First argument must be an array-like object containing nonnegative integers.' );\n\t\t}\n\t\to = {};\n\t\tif ( arguments.length > 2 ) {\n\t\t\terr = validate( o, options );\n\t\t\tif ( err ) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t\tdt = o.dtype || opts.dtype;\n\t\tord = o.order || opts.order;\n\n\t\t// Check whether we've been provided a scalar distribution parameter...\n\t\tif ( isNumber( lambda ) ) {\n\t\t\tparam1 = lambda;\n\t\t\tFLG = true;\n\t\t} else if ( isndarrayLike( lambda ) ) {\n\t\t\tsh = lambda.shape;\n\n\t\t\t// Check whether the distribution parameter is a zero-dimensional array...\n\t\t\tif ( sh.length === 0 ) {\n\t\t\t\tparam1 = lambda.get();\n\t\t\t\tFLG = true;\n\t\t\t} else {\n\t\t\t\t// Broadcast the distribution parameter to the desired shape:\n\t\t\t\tparam1 = broadcastArray( lambda, shape );\n\t\t\t\tFLG = false;\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be either a scalar or an ndarray-like object. Value: `%s`.', lambda ) );\n\t\t}\n\t\t// Handles special cases involving (1) zero-dimensional output ndarrays and (2) shapes having at least one dimension of size zero...\n\t\tif ( len === 0 ) {\n\t\t\t// Check for a zero-dimensional shape...\n\t\t\tif ( shape.length === 0 ) {\n\t\t\t\t// If the output array is a zero-dimensional ndarray, we generate a single random variate...\n\t\t\t\tif ( dt === 'generic' ) {\n\t\t\t\t\tbuf = [ 0.0 ];\n\t\t\t\t} else {\n\t\t\t\t\tctor = ctors( dt );\n\t\t\t\t\tbuf = new ctor( 1 );\n\t\t\t\t}\n\t\t\t\tbuf[ 0 ] = prng( param1 );\n\t\t\t\tst = [ 0 ];\n\t\t\t} else {\n\t\t\t\t// If the output array has one or more dimensions of size zero, we avoid allocating any memory, and instead return an empty ndarray...\n\t\t\t\tif ( dt === 'generic' ) {\n\t\t\t\t\tbuf = [];\n\t\t\t\t} else {\n\t\t\t\t\tctor = ctors( dt );\n\t\t\t\t\tbuf = new ctor( len );\n\t\t\t\t}\n\t\t\t\tst = shape2strides( shape, ord );\n\t\t\t}\n\t\t\treturn new ndarray( dt, buf, shape, st, 0, ord, o );\n\t\t}\n\t\t// If provided a scalar distribution parameter, we can simply fill a linear buffer with pseudorandom numbers (as all pseudorandom numbers are drawn from the same distribution) and then wrap as an ndarray...\n\t\tif ( FLG ) {\n\t\t\tif ( dt === 'generic' ) {\n\t\t\t\tbuf = filledBy( len, wrapper );\n\t\t\t} else {\n\t\t\t\tctor = ctors( dt );\n\t\t\t\tbuf = new ctor( len );\n\t\t\t\tnullaryStrided( [ buf ], [ len ], [ 1 ], wrapper );\n\t\t\t}\n\t\t\tst = shape2strides( shape, ord );\n\t\t\treturn new ndarray( dt, buf, shape, st, 0, ord, o );\n\t\t}\n\t\t// We've been provided an ndarray, so we need to broadcast and perform element-wise iteration...\n\n\t\t// Allocate a data buffer...\n\t\tif ( dt === 'generic' ) {\n\t\t\tbuf = zeros( len );\n\t\t} else {\n\t\t\tctor = ctors( dt );\n\t\t\tbuf = new ctor( len );\n\t\t}\n\t\t// Create the output array:\n\t\tst = shape2strides( shape, ord );\n\t\tout = new ndarray( dt, buf, shape, st, 0, ord, o );\n\n\t\t// Fill the output array with pseudorandom numbers:\n\t\tunary( [ param1, out ], prng );\n\n\t\treturn out;\n\n\t\t/**\n\t\t* Applies parameters to a pseudorandom number generator function.\n\t\t*\n\t\t* @private\n\t\t* @returns {number} pseudorandom number\n\t\t*/\n\t\tfunction wrapper() {\n\t\t\treturn prng( param1 );\n\t\t}\n\t}\n\n\t/**\n\t* Fills an ndarray with pseudorandom numbers drawn from an exponential distribution with rate parameter `lambda`.\n\t*\n\t* @private\n\t* @param {ndarrayLike} out - output array\n\t* @param {(PositiveNumber|ndarrayLike)} lambda - rate parameter\n\t* @throws {TypeError} first argument must be an ndarray\n\t* @throws {TypeError} must provide valid distribution parameters\n\t* @throws {TypeError} distribution parameters and the output array must be broadcast compatible\n\t* @returns {ndarray} output array\n\t*/\n\tfunction assign( out, lambda ) { // TODO: consider reordering arguments to make `out` last\n\t\tvar param1;\n\t\tvar ctor;\n\t\tvar buf;\n\t\tvar dt;\n\t\tvar sh;\n\n\t\tif ( !isndarrayLike( out ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray-like object. Value: `%s`.', out ) );\n\t\t}\n\t\tsh = out.shape;\n\n\t\t// Check whether we've been provided a scalar distribution parameter...\n\t\tif ( isNumber( lambda ) ) {\n\t\t\t// Wrap the scalar in a broadcasted ndarray...\n\t\t\tdt = out.dtype;\n\t\t\tif ( dt === 'generic' ) {\n\t\t\t\tbuf = [ lambda ];\n\t\t\t} else {\n\t\t\t\tdt = 'float64';\n\t\t\t\tctor = ctors( dt );\n\t\t\t\tbuf = new ctor( 1 );\n\t\t\t\tbuf[ 0 ] = lambda;\n\t\t\t}\n\t\t\tparam1 = new basendarray( dt, buf, sh, zeros( sh.length ), 0, 'row-major' );\n\t\t} else if ( isndarrayLike( lambda ) ) {\n\t\t\t// Broadcast the distribution parameter to the desired shape:\n\t\t\tparam1 = broadcastArray( lambda, sh );\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be either a scalar or an ndarray-like object. Value: `%s`.', lambda ) );\n\t\t}\n\t\t// Fill the output array with pseudorandom numbers:\n\t\tunary( [ param1, out ], prng );\n\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns pseudorandom numbers drawn from an exponential distribution with rate parameter `lambda`.\n*\n* @name exponential\n* @type {Function}\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {(PositiveNumber|ndarrayLike)} lambda - rate parameter\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - array data type\n* @param {string} [options.order=\"row-major\"] - memory layout (either row-major or column-major)\n* @param {string} [options.mode=\"throw\"] - specifies how to handle indices which exceed array dimensions\n* @param {StringArray} [options.submode=[\"throw\"]] - specifies how to handle subscripts which exceed array dimensions on a per dimension basis\n* @param {boolean} [options.readonly=false] - boolean indicating whether an array should be read-only\n* @throws {TypeError} first argument must be a valid shape\n* @throws {TypeError} must provide valid distribution parameters\n* @throws {TypeError} distribution parameters and the desired shape must be broadcast compatible\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {ndarray} output array\n*\n* @example\n* var arr = exponential( [ 10 ], 2.0 );\n* // returns <ndarray>\n*\n* @example\n* var arr = exponential( [ 10 ], 2.0, {\n*     'dtype': 'generic'\n* });\n* // returns <ndarray>\n*/\nvar exponential = factory();\n\n\n// EXPORTS //\n\nmodule.exports = exponential;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Generate pseudorandom numbers drawn from an exponential distribution.\n*\n* @module @stdlib/random-exponential\n*\n* @example\n* var exponential = require( '@stdlib/random-exponential' );\n*\n* var arr = exponential( [ 10 ], 2.0 );\n* // returns <ndarray>\n*\n* @example\n* var exponential = require( '@stdlib/random-exponential' );\n*\n* var arr = exponential( [ 10 ], 2.0, {\n*     'dtype': 'generic'\n* });\n* // returns <ndarray>\n*\n* @example\n* var exponential = require( '@stdlib/random-exponential' );\n*\n* var rand = exponential.factory({\n*     'dtype': 'generic',\n*     'order': 'column-major'\n* });\n* // returns <Function>\n*\n* var arr = rand( [ 10 ], 2.0 );\n* // returns <ndarray>\n*\n* @example\n* var exponential = require( '@stdlib/random-exponential' );\n*\n* var rand = exponential.factory({\n*     'dtype': 'generic',\n*     'order': 'column-major'\n* });\n* // returns <Function>\n*\n* var arr = rand( [ 10 ], 2.0, {\n*     'dtype': 'float32'\n* });\n* // returns <ndarray>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"assign\": \"main.assign\", \"factory\": \"main.factory\" }\n"],
  "mappings": "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",
  "names": ["require_defaults", "__commonJSMin", "exports", "module", "require_dtypes", "__commonJSMin", "exports", "module", "dtypes", "DTYPES", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "format", "DTYPES", "validate", "opts", "options", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "isArrayLikeObject", "isndarrayLike", "isNumber", "constantFunction", "noop", "base", "ctors", "filledBy", "zeros", "nullaryStrided", "unary", "broadcastArray", "shape2strides", "numel", "ndarray", "basendarray", "format", "defaults", "validate", "factory", "options", "opts", "prng", "err", "rand", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "assign", "shape", "lambda", "param1", "ctor", "buf", "len", "ord", "FLG", "out", "dt", "st", "sh", "o", "wrapper", "s", "require_main", "__commonJSMin", "exports", "module", "factory", "exponential", "setReadOnly", "main", "factory"]
}
