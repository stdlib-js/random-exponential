{"version":3,"file":"index.mjs","sources":["../lib/factory.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport createFactory from '@stdlib/random-tools-unary-factory';\nimport dtypes from '@stdlib/ndarray-dtypes';\nimport base from '@stdlib/random-base-exponential';\n\n\n// VARIABLES //\n\nvar idtypes = dtypes( 'real_and_generic' );\nvar odtypes = dtypes( 'real_floating_point_and_generic' );\nvar policies = {\n\t'output': 'real_floating_point_and_generic'\n};\n\n\n// MAIN //\n\n/**\n* Returns a function for generating pseudorandom numbers drawn from an exponential distribution.\n*\n* @name factory\n* @type {Function}\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for creating ndarrays\n*\n* @example\n* var rand = factory();\n* // returns <Function>\n*\n* var arr = rand( [ 10 ], 2.0 );\n* // returns <ndarray>\n*\n* @example\n* var rand = factory();\n* // returns <Function>\n*\n* var arr = rand( [ 10 ], 2.0, {\n*     'dtype': 'float32'\n* });\n* // returns <ndarray>\n*/\nvar factory = createFactory( base, idtypes, odtypes, policies );\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport factory from './factory.js';\n\n\n// MAIN //\n\n/**\n* Returns pseudorandom numbers drawn from an exponential distribution with rate parameter `lambda`.\n*\n* @name exponential\n* @type {Function}\n* @param {NonNegativeIntegerArray} shape - output ndarray shape\n* @param {(PositiveNumber|ndarrayLike)} lambda - rate parameter\n* @param {Options} [options] - options\n* @param {string} [options.dtype] - output ndarray data type\n* @param {string} [options.order=\"row-major\"] - memory layout (either row-major or column-major)\n* @param {string} [options.mode=\"throw\"] - specifies how to handle indices which exceed ndarray dimensions\n* @param {StringArray} [options.submode=[\"throw\"]] - specifies how to handle subscripts which exceed ndarray dimensions on a per dimension basis\n* @param {boolean} [options.readonly=false] - boolean indicating whether an ndarray should be read-only\n* @throws {TypeError} first argument must be a valid shape\n* @throws {TypeError} must provide valid distribution parameters\n* @throws {TypeError} distribution parameters and the desired shape must be broadcast compatible\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {ndarray} output ndarray\n*\n* @example\n* var arr = exponential( [ 10 ], 2.0 );\n* // returns <ndarray>\n*\n* @example\n* var arr = exponential( [ 10 ], 2.0, {\n*     'dtype': 'generic'\n* });\n* // returns <ndarray>\n*/\nvar exponential = factory();\n\n\n// EXPORTS //\n\nexport default exponential;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Generate pseudorandom numbers drawn from an exponential distribution.\n*\n* @module @stdlib/random-exponential\n*\n* @example\n* import exponential from '@stdlib/random-exponential';\n*\n* var arr = exponential( [ 10 ], 2.0 );\n* // returns <ndarray>\n*\n* @example\n* import exponential from '@stdlib/random-exponential';\n*\n* var arr = exponential( [ 10 ], 2.0, {\n*     'dtype': 'generic'\n* });\n* // returns <ndarray>\n*\n* @example\n* import exponential from '@stdlib/random-exponential';\n*\n* var rand = exponential.factory();\n* // returns <Function>\n*\n* var arr = rand( [ 10 ], 2.0 );\n* // returns <ndarray>\n*\n* @example\n* import exponential from '@stdlib/random-exponential';\n*\n* var rand = exponential.factory();\n* // returns <Function>\n*\n* var arr = rand( [ 10 ], 2.0, {\n*     'dtype': 'float32'\n* });\n* // returns <ndarray>\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"assign\": \"main.assign\", \"factory\": \"main.factory\" }\n"],"names":["factory","createFactory","base","dtypes","output","exponential","setReadOnly","main"],"mappings":";;wZA6BA,IAwCIA,EAAUC,EAAeC,EAxCfC,EAAQ,oBACRA,EAAQ,mCACP,CACdC,OAAU,oCCyBPC,EAAcL,ICYlBM,EAAAC,EAAA,UAAAP"}